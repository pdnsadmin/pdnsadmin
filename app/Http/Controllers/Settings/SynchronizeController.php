<?php
namespace App\Http\Controllers\Settings;
use App\Domains;
use Illuminate\Http\Request;
use App\Http\Requests;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Redirect;
use DB;
use Auth;
use Validator;
use Illuminate\Support\Facades\Input;
use Session;
use File;
use Hash;
use DateTime;
class SynchronizeController extends Controller
{
	public function __construct() {
		$user = Auth::user();
  		$user_id = intval($user->id);
  		$group_id=intval($user->group_id);
  		//need to check again user permission	
		$allow=get_permission($user->is_root,$user->permission,'synchronize_read');
		if(!$allow)
		{
            exit("You don't have permission to view this page");
        }
        $settings   =   DB::table('settings')->where('key','apiaccess')->first();
        if(!is_object($settings))
        {
            exit('Please config API access to connect server');
        }
        $api=unserialize($settings->value);
        $this->hostmaster   = $api['hostmaster']['value'];
        $this->port         = $api['api_port']['value'];
        $this->auth         = $api['api_key']['value'];
        $this->path         = $api['zonepath']['value'];
        $this->proto        = $api['api_protocol']['value'];
        $this->sslverify    = $api['api_sslverify']['value'];
        $this->ns1          = $api['ns1']['value'];
        $this->ns2          = $api['ns2']['value'];
        $this->ttl          = Auth::user()->ttl?Auth::user()->ttl:3600;
    }
	public function index()
	{
		
		// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $this->proto.'://'.$this->hostmaster.':'.$this->port.'/'.$this->path);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
		$headers = array();
		$headers[] = "X-Api-Key: $this->auth";
		curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
		$result = curl_exec($ch);
		if (curl_errno($ch)) {
		    echo 'Error:' . curl_error($ch);
		}
		curl_close ($ch);
$result=json_decode($result);
if(!is_array($result))
        {
          return Redirect::to('/account/apiaccess');
        }

foreach($result as $k=>$v)
{
	$domain_api[]=trim($v->name,'.');

}
$domains   =   DB::table('domains')->get();
$domain_database=array();
foreach($domains as $k=>$v)
{
	$domain_database[]=trim($v->name,'.');
	
}
$array_diff_server=array_diff($domain_api,$domain_database);//have on server
$array_diff_local=array_diff($domain_database,$domain_api);// have on local

		return view('pages.settings.synchronize')->with(['array_diff_server'=>$array_diff_server,'array_diff_local'=>$array_diff_local]);	
		
	}
	public function update(Request $request)
{
	$post		=	$request->input('name');
	$settings   =   DB::table('settings')->where('key','apiaccess')->first();
	$settings 	=	unserialize($settings->value);
	foreach ($settings as $key => $value) {	
		$settings[$key]['value']=$post[$key];
	}
	$data=array('value'=> serialize($settings));
	DB::table('settings')->where('key','apiaccess')->update($data);
	Session::flash('success', 'update settings  successfully'); 
	return Redirect::to('settings');	
}
public function autocomplete(Request $request)
{
	$q=$request->input('q');	
	if(strlen($q)>=2):
		$get_users=DB::table('users')->where('email','like','%' . $q . '%')->orWhere('name', 'like', '%' . $q . '%')->get();
	$data=array();
	 foreach ($get_users as $get_user):
	 	$data[]=$get_user->email;
	 endforeach;
	 echo 	json_encode($data);exit;
	endif;
	exit();
}
public function synctolocal(Request $request)
{
	$email=$request->input('email');
	$domain=$request->input('domain');
	$user = Auth::user();
	$user_id = intval($user->id);
	$allow=get_permission($user->is_root,$user->permission,'synchronize_edit');
		if(!$allow)
		{
            exit("You don't have permission to synchronization domain");
        }
		$get_users=DB::table('users')->where('email',$email)->first();
		if(!is_object($get_users))
		{
			exit('Could not found user name');
		}
		$now = new DateTime();
		$domains = new Domains;
	     $domains->name = $domain;
	     $domains->type = 0;
	     $domains->user_id =  $get_users->id;  
	     $domains->master =	'master';
	     $domains->created_at =	$now;
	     $domains->updated_at =	$now;
	     $domains->save();
		echo 1;exit;
	exit();
}
public function delete(Request $request)
{
	$user = Auth::user();
	$user_id = intval($user->id);
	$allow=get_permission($user->is_root,$user->permission,'synchronize_delete');
		if(!$allow)
		{
            exit("You don't have permission to delete this domain");
        }
$domain=$request->input('domain');
DB::table('domains')->where('name',$domain)->delete();
}

}
?>